service:
  name: my-chess-portal

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline
#  - serverless-reqvalidator-plugin
#  - serverless-aws-documentation
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs8.10

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-west-1'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    GAME_REQUEST_TABLE: game_request-${self:provider.stage}
    GAME_REQUEST_SORT_INDEX: game_req_createdAt-${self:provider.stage}
    ACTIVE_GAME_TABLE: active_game-${self:provider.stage}

custom:
  serverless-offline:
    port: 3003

  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true

functions:

  ConnectGameHandler:
    handler: src/lambda/websocket/onConnect.handler
    events:
      - websocket:
          route: $connect
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GAME_REQUEST_TABLE}/index/${self:provider.environment.GAME_REQUEST_SORT_INDEX}
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GAME_REQUEST_TABLE}
#          TODO: need auth

  DisconnectGameHandler:
    handler: src/lambda/websocket/onDisconnect.handler
    events:
      - websocket:
          route: $disconnect
#          TODO: need auth

  PlayGameHandler:
    handler: src/lambda/websocket/onPlay.handler
    events:
      - websocket:
          route: $default
#          TODO: need auth

resources:
  Resources:
#    GatewayResponseDefault4XX:
#      Type: AWS::ApiGateway::GatewayResponse
#      Properties:
#        ResponseParameters:
#          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
#          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
#          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
#        ResponseType: DEFAULT_4XX
#        RestApiId:
#          Ref: ApiGatewayRestApi

    GameRequestTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.GAME_REQUEST_TABLE}

#        TODO: use some partition key like (game config, )

        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.GAME_REQUEST_SORT_INDEX}
            KeySchema:
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

#    ActiveGameTable:
#      Type: AWS::DynamoDB::Table
#      Properties:
#        AttributeDefinitions:
#          - AttributeName: userId
#            AttributeType: S
#          - AttributeName: createdAt
#            AttributeType: S
#          - AttributeName: updatedAt
#            AttributeType: S
#        KeySchema:
#          - AttributeName: userId
#            KeyType: HASH
#          - AttributeName: createdAt
#            KeyType: RANGE
#          - AttributeName: updatedAt
#            KeyType: RANGE
#        BillingMode: PAY_PER_REQUEST
#        TableName: ${self:provider.environment.ACTIVE_GAME_TABLE}